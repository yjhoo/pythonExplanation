# 수열 추측하기
# 가장 윗줄에 1부터 N까지의 숫자가 한 개씩 적혀 있다. 그리고 둘째 줄부터 차례대로 파스칼 의 삼각형처럼 위의 두개를 더한 값이 저장되게 된다. 예를 들어 N이 4 이고 가장 윗 줄에 3 1 2 4 가 있다고 했을 때, 다음과 같은 삼각형이 그려진다.
# 3 1 2 4 4 3 6 7 9 16
# N과 가장 밑에 있는 숫자가 주어져 있을 때 가장 윗줄에 있는 숫자를 구하는 프로그램을 작성하 시오. 단, 답이 여러가지가 나오는 경우에는 사전순으로 가장 앞에 오는 것을 출력하여야 한다.
# ▣ 입력설명 첫째 줄에 두개의 정수 N(1≤N≤10)과 F가 주어진다. N은 가장 윗줄에 있는 숫자의 개수를 의 미하며 F는 가장 밑에 줄에 있는 수로 1,000,000 이하이다.
# ▣ 출력설명 첫째 줄에 삼각형에서 가장 위에 들어갈 N개의 숫자를 빈 칸을 사이에 두고 출력한다. 답이 존재 하지 않는 경우는 입력으로 주어지지 않는다.
# ▣ 입력예제 1                                   4 16
# ▣ 출력예제 1 3 1 2 4

import sys
import math
from collections import deque
# heapq를 사용할 수 있도록 추가
import heapq as hq

#sys.stdin = open("in1.txt", "rt")

def f_check(v, sum):
    # v값이 최종에 도달했을때 F가 목표값과 같으면 출력하고 종료
    if v == N and F == sum:
        for j in l:
            print(j, end=' ')
        sys.exit(0)
    else:
        # v가 N보다 작을때 입력되지 않았던 숫자를 추가하고 그 값을 sum에 반영하여 계산
        # 정답이 아닐 경우에는 입력된 숫자를 다시 입력되지 않았던 상태로 돌리고 배열에서 값 제거
        if v < N:
            for j in range(1, N + 1):
                if ch[j] == 0:
                    ch[j] = 1
                    l.append(a[j-1])
                    f_check(v + 1, sum + a[j-1] * b[v])
                    ch[j] = 0
                    l.remove(a[j-1])

N, F = map(int, input().split())
# 1~N까지의 수를 담는 배열
a = [k for k in range(1, N+1)]
# 각 숫자별로 몇번 나오는지를 담는 배열
b = [1] * N
# 숫자가 배열에 입력되었음을 표시하기 위한 배열
ch = [0] * (N + 1)
l = []
# 이항 계수를 구현한 것
# b[i]는 b[i-1] (전의 계산된 값을 담고 있음) * (N-i) / i 를 수행하여 이항계수를 구현
for i in range(1, N):
    b[i] = b[i-1] * (N - i) // i
f_check(0, 0)
