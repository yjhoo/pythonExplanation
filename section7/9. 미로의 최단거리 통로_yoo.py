# 미로의 최단거리 통로(BFS 활용)
# 7*7 격자판 미로를 탈출하는 최단경로의 경로수를 출력하는 프로그램을 작성하세요. 경로수는 출발점에서 도착점까지 가는데 이동한 횟수를 의미한다. 출발점은 격자의 (1, 1) 좌표이고, 탈 출 도착점은 (7, 7)좌표이다. 격자판의 1은 벽이고, 0은 도로이다. 격자판의 움직임은 상하좌우로만 움직인다. 미로가 다음과 같다면
# 출발 0 0 0 0 0 0
# 0 1 1 1 1 1 0
# 0 0 0 1 0 0 0
# 1 1 0 1 0 1 1
# 1 1 0 1 0 0 0
# 1 0 0 0 1 0 0
# 1 0 1 0 0 0 도착
# 위와 같은 경로가 최단 경로이며 경로수는 12이다.
# ▣ 입력설명 7*7 격자판의 정보가 주어집니다.
# ▣ 출력설명 첫 번째 줄에 최단으로 움직인 칸의 수를 출력한다. 도착할 수 없으면 -1를 출력한다.
# ▣ 입력예제 1                                   0 0 0 0 0 0 0 0 1 1 1 1 1 0 0 0 0 1 0 0 0 1 1 0 1 0 1 1 1 1 0 1 0 0 0 1 0 0 0 1 0 0 1 0 1 0 0 0 0
# ▣ 출력예제 1 12

import sys
import math

#sys.stdin=open("in1.txt", "r")
# m_x - x값, m_y - y값, t - 이동한 거리
def f_check(m_x, m_y, t):
    global cnt
    # 마지막에 도달하였을 때 이동한 거리가 cnt보다 작으면 교체
    if m_x == 6 and m_y == 6:
        if cnt > t:
            cnt = t
    # 이동거리가 cnt보다 작을 때만 진행
    if t < cnt:
        # 상하좌우로 이동하되 이동한 곳의 값을 1로 변경하여 되돌아 갈수 없도록 함
        if m_x < 6:
            if a[m_x+1][m_y] == 0:
                a[m_x+1][m_y] = 1
                f_check(m_x + 1, m_y, t + 1)
                a[m_x + 1][m_y] = 0
        if m_y < 6:
            if a[m_x][m_y + 1] == 0:
                a[m_x][m_y + 1] = 1
                f_check(m_x, m_y + 1, t + 1)
                a[m_x][m_y + 1] = 0
        if m_x > 1:
            if a[m_x-1][m_y] == 0:
                a[m_x - 1][m_y] = 1
                f_check(m_x - 1, m_y, t + 1)
                a[m_x - 1][m_y] = 0
        if m_y > 1:
            if a[m_x][m_y - 1] == 0:
                a[m_x][m_y - 1] = 1
                f_check(m_x, m_y - 1, t + 1)
                a[m_x][m_y - 1] = 0
a = [[int(x) for x in map(int, input().split())] for y in range(7)]
cnt = 1000
f_check(0, 0, 0)
# 값이 변하지 않았을 경우 -1 출력, 아니면 값 출력
if cnt == 1000:
    print(-1)
else:
    print(cnt)
