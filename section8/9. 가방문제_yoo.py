# 가방문제(냅색 알고리즘)
# 최고 17kg의 무게를 저장할 수 있는 가방이 있다. 그리고 각각 3kg, 4kg, 7kg, 8kg, 9kg의 무게를 가진 5종류의 보석이 있다. 이 보석들의 가치는 각각 4, 5, 10, 11, 13이다. 이 보석을 가방에 담는데 17kg를 넘지 않으면서 최대의 가치가 되도록 하려면 어떻게 담아야 할까요? 각 종류별 보석의 개수는 무한이 많다. 한 종류의 보석을 여러 번 가방에 담을 수 있 다는 뜻입니다.
# ▣ 입력설명 첫 번째 줄은 보석 종류의 개수와 가방에 담을 수 있는 무게의 한계값이 주어진다. 두 번째 줄부터 각 보석의 무게와 가치가 주어진다. 가방의 저장무게는 1000kg을 넘지 않는다.  보석의 개수는 30개 이내이다.
# ▣ 출력설명 첫 번째 줄에 가방에 담을 수 있는 보석의 최대가치를 출력한다.
# ▣ 입력예제 1                                   4 11 5 12 3 8 6 14 4 8
# ▣ 출력예제 1 28

import sys

#sys.stdin = open('in1.txt', 'r')
# n - 무게의 값 / s - 보석의 가치의 총 합
def f_check(n, s):
    # c에 저장된 해당 무게의 총 합보다 가치가 크면 그 값을 저장
    if s > c[n]:
        c[n] = s
    for i in range(N):
        # 무게가 기준보다 같거나 작고 가치가 기존 가치보다 크면 진행
        if n + l[i][0] <= M and c[n + l[i][0]] < c[n] + l[i][1]:
            f_check(n + l[i][0], s + l[i][1])
N, M = map(int, input().split())
l = []
c = [0] * (M + 1)
for _ in range(N):
    a, b = map(int, input().split())
    l.append((a, b))
f_check(0, 0)
print(c[M])
